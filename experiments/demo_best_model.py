#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ
–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—É—î, —è–∫ –ø—Ä–∞—Ü—é—î –ª–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ
"""

import os
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import pickle
from datetime import datetime

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BEST_MODEL_DIR = '../best_model'

# –¢–µ—Å—Ç–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
HYPERPARAMETERS = [
    {'n_estimators': 50, 'max_depth': 3, 'min_samples_split': 2},
    {'n_estimators': 100, 'max_depth': 5, 'min_samples_split': 2},
    {'n_estimators': 150, 'max_depth': 7, 'min_samples_split': 2},
]

def train_model(X_train, X_test, y_train, y_test, params):
    """–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print(f"–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
    
    model = RandomForestClassifier(
        n_estimators=params['n_estimators'],
        max_depth=params['max_depth'],
        min_samples_split=params['min_samples_split'],
        random_state=42
    )
    
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    print(f"–¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ: {accuracy:.4f}")
    return model, accuracy

def save_best_model(best_model, best_accuracy, run_id):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ"""
    os.makedirs(BEST_MODEL_DIR, exist_ok=True)
    
    model_path = os.path.join(BEST_MODEL_DIR, f'best_model_{run_id}.pkl')
    with open(model_path, 'wb') as f:
        pickle.dump(best_model, f)
    
    print(f"‚úÖ –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤: {model_path}")
    print(f"   –¢–æ—á–Ω—ñ—Å—Ç—å: {best_accuracy:.4f}")
    print(f"   Run ID: {run_id}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ")
    print("=" * 50)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    print("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö Iris...")
    iris = load_iris()
    X, y = iris.data, iris.target
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ
    best_accuracy = 0
    best_model = None
    best_run_id = None
    
    print(f"üìà –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {len(HYPERPARAMETERS)} –º–æ–¥–µ–ª–µ–π...")
    print()
    
    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    for i, params in enumerate(HYPERPARAMETERS):
        run_id = f"demo_run_{i+1}_{datetime.now().strftime('%H%M%S')}"
        print(f"--- Run {i+1}: {run_id} ---")
        
        model, accuracy = train_model(X_train, X_test, y_train, y_test, params)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –Ω–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å
        if accuracy > best_accuracy:
            best_accuracy = accuracy
            best_model = model
            best_run_id = run_id
            print(f"üéØ –ù–æ–≤–∞ –Ω–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å! –¢–æ—á–Ω—ñ—Å—Ç—å: {accuracy:.4f}")
        else:
            print(f"üìâ –ú–æ–¥–µ–ª—å –≥—ñ—Ä—à–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω—É –Ω–∞–π–∫—Ä–∞—â—É ({best_accuracy:.4f})")
        
        print()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ
    if best_model is not None:
        save_best_model(best_model, best_accuracy, best_run_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:")
        if os.path.exists(BEST_MODEL_DIR):
            files = os.listdir(BEST_MODEL_DIR)
            print(f"   –§–∞–π–ª–∏ –≤ {BEST_MODEL_DIR}:")
            for file in files:
                print(f"   - {file}")
        else:
            print("   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î")
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–æ—ó –º–æ–¥–µ–ª—ñ")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
